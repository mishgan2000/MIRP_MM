/*
 * can_cmd.c
 *
 *  Created on: 03.04.2017
 *      Author: pavlenko_av
 */

#include <string.h>

#include "can_cmd.h"
#include "can_cmd_defs.h"
#include "io-mrte.h"
#include "can_freertos.h"
//#include "timer_1ms.h"
//#include "plt_spi_thread_safe.h"
#include "xstatus.h"
//#include "led.h"
//#include "nand_archiver.h"
//#include "simplex_zond.h"
//#include "sova.h"
//#include "tool_config.h"
//#include "Gpio.h"
//#include "plt.h"

//extern SIMPLEX_HandleTypeDef SimplexStruct;
//extern u16	device_type;
#define MODULE_VER_PO				"Mike Dev 1"
const char ver_pro[32] = MODULE_VER_PO;


extern int set_flash_protection(int is_enable);

u32 	status_page = 0;

//
static inline void Prepare_Tx_Buf(RX_Com_buf_type* RX_Com_buf_pointer, TX_Com_buf_type * TX_Com_buf_pointer)
{
	//TX_Com_buf_pointer->CmdMarker 		= RX_Com_buf_pointer->CmdMarker;
	//TX_Com_buf_pointer->CmdCode 		= RX_Com_buf_pointer->CmdCode;
	//TX_Com_buf_pointer->Timer 			= GetKaspTimeStamp();
}
//something goes wrong...
static  void	Prepare_Buf_ERROR (RX_Com_buf_type* RX_Com_buf_pointer, TX_Com_buf_type * TX_Com_buf_pointer, u8 ERROR, int *panssize)
{
	/*
	TX_Com_buf_pointer->CmdCode			|= 0x80;
	TX_Com_buf_pointer->COMMAND.ERROR	= ERROR;
	(*panssize) = Length_ERROR_TX;
	*/
}

extern void utcClockSetDeltaTime(u32 time_mark_sec, u16 time_mark_ms);
extern portBASE_TYPE 	free_mrte_send_buff(t_mrte_msg_buff * pbuf);

void cmd_decoder( t_mega2_rxdatablock *pmega )
{
	int request_length, answer_length = 0;
	static t_mrte_msg_buff	* p_mrte_buff = NULL;
	u8 mega_ans_type = CAN_SEND_SYNC;
	u8 kk;

	int ii=0;

	TX_Com_buf_type*	TX_Com_buf_pointer;
	RX_Com_buf_type*	RX_Com_buf_pointer;
	for(ii = 0; ii < 100; ii++){

	}
///*
	p_mrte_buff = alloc_mrte_send_buff(portMAX_DELAY);

	configASSERT(p_mrte_buff != NULL);
	if(p_mrte_buff == NULL)
	{
		return;
	}
///*
	RX_Com_buf_pointer = (RX_Com_buf_type*) &pmega->data[0];
	TX_Com_buf_pointer = (TX_Com_buf_type*) &p_mrte_buff->buff->data.dU8[0];

	Prepare_Tx_Buf(RX_Com_buf_pointer, TX_Com_buf_pointer);

	request_length = pmega->curr_ind;

	if(request_length > 8)
	{
		request_length -= Length_CRC;
	}
///*
	switch(pmega->data[1])
	{/*
		case COMMAND_READ_ARC_FILE_DATA:
		{
			if(request_length != SIZE_RECEIVE_COM_RD_ARC_FILE_DATA)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				u32		NUM_BEGIN_PAGE = 0;
				u32		NUM_END_PAGE = 0;
				u8		ERR = -1;
				u32		read_page = 0;
				u32 	rd_length = 0;
//				u32 	status_page = 0;

				NUM_BEGIN_PAGE  	= RX_Com_buf_pointer->COMMAND.COM_RD_ARC_FILE_DATA_buf.NUM_BEGIN_PAGE;
				NUM_END_PAGE		= RX_Com_buf_pointer->COMMAND.COM_RD_ARC_FILE_DATA_buf.NUM_END_PAGE;

				answer_length = SIZE_ANSWER_COM_RD_ARC_FILE_DATA;
				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);

				u32 arc_num_start_page = NAND_get_start_page();
				u32 arc_num_stop_page = NAND_get_stop_page();

				if( (NUM_BEGIN_PAGE < arc_num_start_page) || (NUM_END_PAGE> arc_num_stop_page) || (NUM_BEGIN_PAGE > NUM_END_PAGE) )
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAM_OUT_OF_RANGE, &answer_length);
				}
				else if( device_is_in_msmt_state() )
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_CONFLICT, &answer_length);
				}
				else
				{
					rd_length = NUM_END_PAGE - NUM_BEGIN_PAGE + 1;
					read_page = NUM_BEGIN_PAGE;
					ERR = 0;
				}
				//Read if addr is correct
				if(ERR == 0)
				{
					do
					{


		#if NAND_USE
						status_page = NAND_read_arc_page( (u8*)(&TX_Com_buf_pointer->COMMAND.COM_RD_FILE_DATA_buf.DATA[0]), read_page );
		#else

		#endif //NAND_USE

						p_mrte_buff->len = SIZE_ANSWER_COM_RD_ARC_FILE_DATA;

						if(status_page != XST_SUCCESS)
						{
							p_mrte_buff->len = SIZE_ANSWER_COM_RD_ARC_FILE_DATA - 2040;

						}

						TX_Com_buf_pointer->COMMAND.COM_RD_ARC_FILE_DATA_buf.NUM_PAGE = read_page;
						TX_Com_buf_pointer->COMMAND.COM_RD_ARC_FILE_DATA_buf.STATUS_PAGE = status_page;

						rd_length -= 1;
						read_page += 1;
						//send obtained chunk
						while(request_mrte_send(CAN_SEND_SYNC, p_mrte_buff) == pdFALSE);
						//alloc new send buffer
						if(rd_length != 0)
						{
							p_mrte_buff = alloc_mrte_send_buff(portMAX_DELAY);
							configASSERT(p_mrte_buff != NULL);
							if(p_mrte_buff == NULL)
							{
								answer_length = 0;
								break;
							}
							TX_Com_buf_pointer = (TX_Com_buf_type*) &p_mrte_buff->buff->data.dU8[0];
							Prepare_Tx_Buf(RX_Com_buf_pointer, TX_Com_buf_pointer);
						}
						else
						{
							p_mrte_buff = NULL;
							answer_length = 0;
						}
					}
					while(rd_length != 0);
				}
			}
			break;
		}
		case COMMAND_SET_SER_NUM:
		{
			if(request_length != SIZE_RECEIVE_COM_SET_SER_NUM)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				if(set_serial_number(RX_Com_buf_pointer->COMMAND.SET_SER_NUM_buf.serial_number) == XST_SUCCESS)
				{
					answer_length = SIZE_ANSWER_COM_SET_SER_NUM;
					configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
					TX_Com_buf_pointer->COMMAND.SET_SER_NUM_buf.serial_number = get_serial_num();
				}
				else
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_HARDWARE, &answer_length);
				}
			}
			break;
		}
		case COMMAND_SET_PARAMS:
		{
			if(request_length != SIZE_RECEIVE_COM_SET_PARAMS)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				int ret = set_plt_params(&RX_Com_buf_pointer->COMMAND.SET_PARAMS_buf);
				if(ret == 0)
				{
					answer_length = SIZE_ANSWER_COM_SET_PARAMS;
					configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
					TX_Com_buf_pointer->COMMAND.SET_PARAMS_buf.channel	 = RX_Com_buf_pointer->COMMAND.SET_PARAMS_buf.channel;
					TX_Com_buf_pointer->COMMAND.SET_PARAMS_buf.curr_value = RX_Com_buf_pointer->COMMAND.SET_PARAMS_buf.curr_value;
					TX_Com_buf_pointer->COMMAND.SET_PARAMS_buf.volt_limit = RX_Com_buf_pointer->COMMAND.SET_PARAMS_buf.volt_limit;
				}
				else if(ret == 1)
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAM_OUT_OF_RANGE, &answer_length);
				}
				else
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
				}

			}
			break;
		}
		case COMMAND_GET_PARAMS:
		{
			if(request_length != SIZE_RECEIVE_COM_GET_PARAMS)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				answer_length = SIZE_ANSWER_COM_GET_PARAMS;
				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
				copy_plt_params(&TX_Com_buf_pointer->COMMAND.GET_PARAMS_buf);
			}
			break;
		}
		case COMMAND_GET_INFO:
		{
			if(request_length != SIZE_RECEIVE_COM_RD_GET_INFO)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{

			}
			break;
		}
		case COMMAND_SET_TIME:
		{
			if(request_length != SIZE_RECEIVE_COM_SET_TIME)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				TX_Com_buf_pointer->COMMAND.SET_TIME_buf.utc_time = SetUTCTime(RX_Com_buf_pointer->COMMAND.SET_TIME_buf.utc_time);
				answer_length = SIZE_ANSWER_COM_SET_TIME;
				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
			}
			break;
		}
		case COMMAND_TIMESTAMP:
		{
			if(request_length != SIZE_RECEIVE_COM_TIMESTAMP)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				utcClockSetDeltaTime(RX_Com_buf_pointer->COMMAND.TIMESTAMP.utc_time, RX_Com_buf_pointer->COMMAND.TIMESTAMP.time_ms);
				answer_length = 0; //SIZE_ANSWER_COM_TIMESTAMP=0 Do not answer
				free_mrte_send_buff(p_mrte_buff);//free TX datablock
			}
			break;
		}
		case COMMAND_SET_TIMER:
		{
			if(request_length != SIZE_RECEIVE_COM_SET_TIMER)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				int ret =  set_msmt_timer(&RX_Com_buf_pointer->COMMAND.SET_TIMER_buf);
				//
				if(ret == 0)
				{
					answer_length = SIZE_ANSWER_COM_SET_TIMER;
					configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
					//
					copy_msmt_timer(&TX_Com_buf_pointer->COMMAND.SET_TIMER_buf);
				}
				else if(ret == -1)
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAM_OUT_OF_RANGE, &answer_length);
				}
				else
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_HARDWARE, &answer_length);
				}
				//
				if((ret == 0) && (SaveCAN_ID() != 0))
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_HARDWARE, &answer_length);
				}
				//
			}
			break;
		}
		case COMMAND_WRITE_FILE_DATA:
		{
			u16		FILE_SEL;
			u32		START_ADDRES[2] = {0,0}; 				//
			u32		STOP_ADDRES[2] = {0,0};
			u8 		ERR = -1;
			//
			//u16 page_addr = AT45DB321D_END_PAGE;
			u32 wr_length = 0;
			u16 page_offset = 0;

			FILE_SEL 			= RX_Com_buf_pointer->COMMAND.COM_WR_FILE_DATA_buf.FILE_SEL;
			START_ADDRES[0] 	= RX_Com_buf_pointer->COMMAND.COM_WR_FILE_DATA_buf.START_ADDRES[0];
			STOP_ADDRES[0]		= RX_Com_buf_pointer->COMMAND.COM_WR_FILE_DATA_buf.STOP_ADDRES[0];

			if(request_length < SIZE_ANSWER_COM_WR_FILE_DATA)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				//Prepare Write address and params
				answer_length = SIZE_ANSWER_COM_WR_FILE_DATA;
				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
				switch(FILE_SEL)
				{

					default:
					{
						Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_UNEXPECTED, &answer_length);
						break;
					}
				}
				//Write File
			}
			break;
		}
		case COMMAND_READ_FILE_DATA:
		{
			if(request_length != SIZE_RECEIVE_COM_RD_FILE_DATA)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				u16		FILE_SEL;
				u32		START_ADDRES[2] = {0,0};
				u32		STOP_ADDRES[2] = {0,0};
				u8		ERR = -1;
				//
				u32		read_addr = 0;

				//				u16 	page_addr = AT45DB321D_END_PAGE;
				//				u16 	page_offset = 0;
				u32 	rd_length = 0;
				//				u16 	page_num = 0;
				//


				FILE_SEL 			= RX_Com_buf_pointer->COMMAND.COM_RD_FILE_DATA_buf.FILE_SEL;
				START_ADDRES[0] 	= RX_Com_buf_pointer->COMMAND.COM_RD_FILE_DATA_buf.START_ADDRES[0];
				STOP_ADDRES[0]		= RX_Com_buf_pointer->COMMAND.COM_RD_FILE_DATA_buf.STOP_ADDRES[0];

				answer_length = SIZE_ANSWER_COM_RD_FILE_DATA;
				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);

				//Prepare address and read params

				//Access to SPI FLASH
				switch(FILE_SEL)
				{


					case FILE_ARC_com:
					{
						u32 arc_fil_size = nand_get_flash_pages_num();
						if( (START_ADDRES[0] >= (arc_fil_size)) || ((STOP_ADDRES[0] - START_ADDRES[0]) != 1) )
						{
							Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAM_OUT_OF_RANGE, &answer_length);
						}
						else if( device_is_in_msmt_state() )
						{
							Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_CONFLICT, &answer_length);
						}
						else
						{
							rd_length = 1;//(STOP_ADDRES[0] > arc_fil_size) ? (arc_fil_size - START_ADDRES[0]) : (STOP_ADDRES[0] - START_ADDRES[0]);
							read_addr = START_ADDRES[0];
							//						page_offset = START_ADDRES[0] % PAGE_SIZE;
							//						page_num = rd_length / PAGE_SIZE + (((rd_length % PAGE_SIZE) > 0) ? 1 : 0);
							ERR = 0;
						}
						break;
					}
					default:
					{
						Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_UNEXPECTED, &answer_length);
						break;
					}
				}//switch(FILE_SEL)
				//Read if addr is correct
				if(ERR == 0)
				{
					//If read SPI take semaphore

					//Make do-while read loop
					do //while(rd_length != 0);
					{
						u32 req_len = rd_length;
						int ret=-1;
						//
						if(req_len > (MAX_LENGTH_PACKAGE_def ))
						{
							req_len = (MAX_LENGTH_PACKAGE_def );
						}
						//
						if(FILE_SEL != FILE_ARC_com)
						{
							ret = read_spi_flash( read_addr, (u8*)(&TX_Com_buf_pointer->COMMAND.COM_RD_FILE_DATA_buf.DATA[0]), req_len );
						}
						else
						{
							ret = NAND_read_arc_page( (u8*)(&TX_Com_buf_pointer->COMMAND.COM_RD_FILE_DATA_buf.DATA[0]), read_addr );
						}
						//
						if(ret != XST_SUCCESS)
						{
							Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_HARDWARE, &answer_length);
							inc_spi_err_cnt();
							break;
						}
						//parse addr pointers
						//							page_addr++;
						//							page_offset = 0;
						//							page_num--;
						rd_length -= req_len;
						START_ADDRES[0] += req_len;
						read_addr += req_len;
						//prepare obtained chunk
						TX_Com_buf_pointer->COMMAND.COM_RD_FILE_DATA_buf.CUR_ADDRES[0] = (START_ADDRES[0]);
						TX_Com_buf_pointer->COMMAND.COM_RD_FILE_DATA_buf.CUR_ADDRES[1] = 0;
						//send obtained chunk
						p_mrte_buff->len = SIZE_ANSWER_COM_RD_FILE_DATA - MAX_LENGTH_PACKAGE_def + req_len;
						while(request_mrte_send(CAN_SEND_SYNC, p_mrte_buff) == pdFALSE);
						//alloc new send buffer
						if(rd_length != 0)
						{
							p_mrte_buff = alloc_mrte_send_buff(portMAX_DELAY);
							configASSERT(p_mrte_buff != NULL);
							if(p_mrte_buff == NULL)
							{
								answer_length = 0;
								break;
							}
							TX_Com_buf_pointer = (TX_Com_buf_type*) &p_mrte_buff->buff->data.dU8[0];
							Prepare_Tx_Buf(RX_Com_buf_pointer, TX_Com_buf_pointer);
						}
						else
						{
							p_mrte_buff = NULL;
							answer_length = 0;
						}
						//
					}
					while(rd_length != 0);
					//Release mutex
					if(FILE_SEL != FILE_ARC_com)
					{
					//	xSemaphoreGive(spi_rw_mutex);
					}
				}//else of if(ERR == 0)
			}//else of if(request_length != SIZE_RECEIVE_COM_RD_FILE_DATA)
			break;
		}
		case COMMAND_SET_ARC_ADDR:
		{
			if(request_length != SIZE_RECEIVE_SET_ARC_ADDR)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				//TODO	RX_Com_buf_pointer->COMMAND.SET_ARC_ADDR_buf.arc_addr[0]
				//TODO	RX_Com_buf_pointer->COMMAND.SET_ARC_ADDR_buf.arc_addr[1]
				answer_length = SIZE_ANSWER_GET_SET_ARC_ADDR;
				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
				TX_Com_buf_pointer->COMMAND.GET_ARC_ADDR_buf.arc_addr[0] = 0;//TODO
				TX_Com_buf_pointer->COMMAND.GET_ARC_ADDR_buf.arc_addr[0] = 0;//TODO
			}
			break;
		}
		case COMMAND_GET_ARC_ADDR:
		{
			if(request_length != SIZE_RECEIVE_GET_ARC_ADDR)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				//
				answer_length = SIZE_ANSWER_GET_SET_ARC_ADDR;
				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
				TX_Com_buf_pointer->CmdMarker 	= RX_Com_buf_pointer->CmdMarker;
				TX_Com_buf_pointer->CmdCode 	= RX_Com_buf_pointer->CmdCode;
				TX_Com_buf_pointer->Timer 		= GetKaspTimeStamp();
	#if NAND_USE
				TX_Com_buf_pointer->COMMAND.GET_ARC_ADDR_buf.arc_addr[0] = NAND_get_start_page();//1;//nand_get_arc_addr();
				TX_Com_buf_pointer->COMMAND.GET_ARC_ADDR_buf.arc_addr[1] = NAND_get_stop_page();//5;
	#else
					TX_Com_buf_pointer->COMMAND.GET_ARC_ADDR_buf.arc_addr[0] = 1;//1;//nand_get_arc_addr();
					TX_Com_buf_pointer->COMMAND.GET_ARC_ADDR_buf.arc_addr[1] = 0;//5;
	#endif //NAND_USE

			}
			break;
		}
		case COMMAND_COPY_TO_GOLDEN:
		{
			if(request_length != SIZE_RECEIVE_COMMAND_COPY_TO_GOLDEN)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				if(RX_Com_buf_pointer->COMMAND.COPY_TO_GOLDEN_buf.sequrity_key == COPY_TO_GOLDEN_MAGIC_KEY)
				//if (1)
				{
					u8 updt_error_code = 0x00;
					//set_led(LED_0);
					{
						if ( set_flash_protection(0) != XST_SUCCESS )
						{
							Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
							break;
						}
						if ( fix_firmware() != XST_SUCCESS )
						{
							set_flash_protection(1);
							Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
							break;
						}

						if( set_flash_protection(1) != XST_SUCCESS )
						{
							Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
							break;
						}
					}
					answer_length = SIZE_ANSWER_COMMAND_COPY_TO_GOLDEN;
					TX_Com_buf_pointer->COMMAND.COPY_TO_GOLDEN_buf.sequrity_key = updt_error_code;
					//clr_led(LED_0);
				}
				else
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
				}
			}
			break;
		}
		case COMMAND_CAN_ECHO_TEST:
		{
			answer_length = (request_length - Length_HEAD_RX) + Length_HEAD_TX;
			configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
			for(ii=0; ii<(request_length-Length_HEAD_RX);ii++)
			{
				p_mrte_buff->buff->data.dU8[ii+Length_HEAD_TX] = pmega->data[ii+Length_HEAD_RX];
			}
			break;

		}
		case COMMAND_SAVE_CANID:
		{
			if(request_length != SIZE_RECEIVE_COMMAND_SAVE_CAN_ID)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				//
				answer_length = SIZE_ANSWER_COMMAND_SAVE_CAN_ID;
				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
				//
				copy_can_id_to_u8_buff((u8*)(&TX_Com_buf_pointer->COMMAND.ERROR));//It is a little hack. ERROR is chosen as first byte of union TX_Com_buf_pointer->COMMAND
				//
				if(SaveCAN_ID() != XST_SUCCESS)
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_HARDWARE, &answer_length);
				}
			}
			break;
		}
		case COMMAND_FORMAT_FLASH:
		{
			if(request_length != SIZE_RECEIVE_COMMAND_COMMAND_FORMAT_FLASH)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				//Compare Sequre Key
				if(RX_Com_buf_pointer->COMMAND.FORMAT_FLASH_MAGIC_word.sequrity_key == FORMAT_FLASH_MAGIC_KEY)
				{
					answer_length = SIZE_ANSWER_COMMAND_COMMAND_FORMAT_FLASH;
					configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);

						//TX_Com_buf_pointer->COMMAND.FORMAT_FLASH_TX_buf.flash_status = NAND_format_flash();
						TX_Com_buf_pointer->COMMAND.FORMAT_FLASH_TX_buf.bad_block_num = nand_get_bad_block_count();

				}
				else
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_CONFLICT, &answer_length);
				}
			}
			break;
		}

		case COMMAND_GET_BASE_TLM:
		{
			//Simplex_StatusTypeDef status;

			if(request_length < 10)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				// BEGIN SET ZOND PROCEDURE
				u8 *MX0,*MX1;
				u8 i;
				if(RX_Com_buf_pointer->COMMAND.BASE_TLM_buf.TLM_PERIOD==0x0000)
				{
					//zond_init();
					//vSetErrorBit(SIMPLEX_NOT_REQUEST);
					//answer_length = PrepareBaseDataEmpty(&TX_Com_buf_pointer->COMMAND.BASE_TLM_buf);
					// PrepareBaseTlmSimplex(&TX_Com_buf_pointer->COMMAND.BASE_TLM_buf);
				}
				else
				if(RX_Com_buf_pointer->COMMAND.BASE_TLM_buf.Len<4)
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAM_OUT_OF_RANGE, &answer_length);
				}

				else
				{		//vResetErrorBit(SIMPLEX_NOT_REQUEST);
						MX0 = gettxmem();		// save ptr
						MX1 = MX0;
						*MX0++=RX_Com_buf_pointer->COMMAND.BASE_TLM_buf.Len; // size in bytes here!
						*MX0++=RX_Com_buf_pointer->COMMAND.BASE_TLM_buf.Adr;
						*MX0++=RX_Com_buf_pointer->COMMAND.BASE_TLM_buf.Com;
						for(i=0;i<RX_Com_buf_pointer->COMMAND.BASE_TLM_buf.Len-3;i++)
						*MX0++=RX_Com_buf_pointer->COMMAND.BASE_TLM_buf.Data[i];
						//set_zond(MX1,RX_Com_buf_pointer->COMMAND.BASE_TLM_buf.PeriodZond);
						//time_align(get_TimeShift());
						answer_length = PrepareBaseDataEmpty(&TX_Com_buf_pointer->COMMAND.BASE_TLM_buf);
						//answer_length = PrepareBaseTlmSimplex(&TX_Com_buf_pointer->COMMAND.BASE_TLM_buf);
						//				mega_ans_type = CAN_SEND_ASYNC;
				}
				// END SET ZOND PROCEDURE


				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
			}
			break;
		}
		case COMMAND_GET_EXT_TLM:
		{
			if(request_length != 4) // TODO: SAS_Q to Pastushenko: I,m not understand what is mean SIZE_RECEIVE_GET_EXT_TLM
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				//

					if(RX_Com_buf_pointer->COMMAND.EXT_TLM_buf.TLM_PERIOD==0)
					{
						on_start_stop_cmd((u8)0);
						answer_length = PrepareExtTlm(&TX_Com_buf_pointer->COMMAND.EXT_TLM_buf);
						configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
					}
					else if(RX_Com_buf_pointer->COMMAND.EXT_TLM_buf.TLM_PERIOD==0xffff)
						{
							RX_Com_buf_pointer->COMMAND.EXT_TLM_buf.TLM_PERIOD=1000;
							set_msmt_timer(RX_Com_buf_pointer);
							answer_length = PrepareExtTlm(&TX_Com_buf_pointer->COMMAND.EXT_TLM_buf);
							configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
						}
					else
					{
						int ret =  set_msmt_timer(RX_Com_buf_pointer);
						if(ret==0)
						{

						on_start_stop_cmd((u8)1);

						answer_length = PrepareExtTlm(&TX_Com_buf_pointer->COMMAND.EXT_TLM_buf);
						configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
						}
						else if(ret == -1)
						{
							Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAM_OUT_OF_RANGE, &answer_length);
						}
						else
						{
							Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_HARDWARE, &answer_length);
						}
					}
			break;
			}
		}
		case COMMAND_GET_OSC:
		{
			if(request_length != SIZE_RECEIVE_GET_OSC)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				//
				if(SetupOscPeriod(RX_Com_buf_pointer->COMMAND.GET_OSC_buf.OscPeriod, RX_Com_buf_pointer->COMMAND.GET_OSC_buf.Channel) != XST_SUCCESS)
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAM_OUT_OF_RANGE, &answer_length);
				}
				else
				{
					TX_Com_buf_pointer->COMMAND.GET_OSC_buf.OscPeriod = GetActualOscPeriod();
					TX_Com_buf_pointer->COMMAND.GET_OSC_buf.Channel =  GetActualOscCh();
					answer_length = SIZE_ANSWER_GET_OSC;
					configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
				}
			}
			break;
		}
		case COMMAND_SET_DISTR_SERIES_TIME:
		{
			if(request_length != SIZE_RECEIVE_COM_SET_DISTR_SERIES_TIME)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				set_TimeShift(RX_Com_buf_pointer->COMMAND.SET_DISTR_SERIES_TIME.TimeShift);
				time_align(get_TimeShift());
				answer_length = SIZE_ANSWER_COM_SET_DISTR_SERIES_TIME;
				TX_Com_buf_pointer->COMMAND.SET_DISTR_SERIES_TIME.TimeShift = get_TimeShift();
				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);

			}
			break;
		}
		case COMMAND_SET_MODE_SP:
		{
			if(request_length != SIZE_RECEIVE_COM_SET_MODE_SP)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				// plug
				answer_length = SIZE_ANSWER_COM_SET_MODE_SP;
				//vSetModeSp(RX_Com_buf_pointer->COMMAND.SET_MODE_SP.mode_sp);
				vToolInit(RX_Com_buf_pointer->COMMAND.SET_MODE_SP.mode_sp);
				TX_Com_buf_pointer->COMMAND.SET_MODE_SP.mode_sp = u8GetModeSp();

				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
			}
			break;
		}
		case COMMAND_PWR_OFF_ON:
		{
			if(request_length != SIZE_RECEIVE_COM_PWR_OFF_ON)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				// plug
				answer_length = SIZE_ANSWER_COM_PWR_OFF_ON;
				TX_Com_buf_pointer->COMMAND.PWR_OFF_ON.pwr = RX_Com_buf_pointer->COMMAND.PWR_OFF_ON.pwr;
				if(RX_Com_buf_pointer->COMMAND.PWR_OFF_ON.pwr==0)
				{ // off
					//set_led(DIG2_PWR_OFF);
					//GPIO_SetBit(PWR_OFF);

				}
				else
				{//on
					//clr_led(DIG2_PWR_OFF);
					//GPIO_ResetBit (PWR_OFF);
				}

				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
			}
			break;
		}
		case COMMAND_UP_37V:
		{
			if(request_length != SIZE_RECEIVE_COM_UP_37V)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				// plug
				answer_length = SIZE_ANSWER_COM_UP_37V;
				TX_Com_buf_pointer->COMMAND.UP_37V.state = RX_Com_buf_pointer->COMMAND.UP_37V.state;

				if(RX_Com_buf_pointer->COMMAND.UP_37V.state==0)
				{ // off
					//set_led(DIG2_PWR_OFF);
					//GPIO_SetBit(UP37_PIN);

				}
				else
				{//on
					//clr_led(DIG2_PWR_OFF);
					//GPIO_ResetBit (UP37_PIN);
				}


				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
			}
			break;
		}
		case COMMAND_SET_STI:
		{
			if(request_length != SIZE_RECEIVE_COM_SET_STI)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				// plug
				answer_length = SIZE_ANSWER_COM_SET_STI;
				TX_Com_buf_pointer->COMMAND.SET_STI.STI  = RX_Com_buf_pointer->COMMAND.SET_STI.STI;
				vSetModeSti(RX_Com_buf_pointer->COMMAND.SET_STI.STI);

				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
			}
			break;
		}
		case GET_SPEED_SIMPLEX:
		{
			if(request_length != SIZE_RECEIVE_GET_SPEED_SIMPLEX)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				// plug
				answer_length = SIZE_ANSWER_GET_SPEED_SIMPLEX;
				u16 u16RxSpeed;
				u16 u16TxSpeed;
				//GetSimplexSpeed(&SimplexStruct, &u16RxSpeed , &u16TxSpeed );
				TX_Com_buf_pointer->COMMAND.GET_SPEED.rx = u16TxSpeed;		// so this parameters tool PLT
				TX_Com_buf_pointer->COMMAND.GET_SPEED.tx = u16RxSpeed;

				configASSERT((answer_length + Length_CRC) <= MSG_MAX_LEN);
			}
			break;
		}
		case COMMAND_START_STOP_LOGGING:
		{
			if(request_length != SIZE_RECEIVE_COMMAND_START_STOP_LOGGING)
			{
				Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAMS_SIZE, &answer_length);
			}
			else
			{
				if( RX_Com_buf_pointer->COMMAND.START_STOP_LOGGING.cmd < 2)
				{
					//
					if(on_start_stop_cmd(RX_Com_buf_pointer->COMMAND.START_STOP_LOGGING.cmd) == XST_SUCCESS)
					{
						TX_Com_buf_pointer->COMMAND.START_STOP_LOGGING.cmd = RX_Com_buf_pointer->COMMAND.START_STOP_LOGGING.cmd;
						answer_length = SIZE_ANSWER_COMMAND_START_STOP_LOGGING;

					}
					else
					{
						Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_HARDWARE, &answer_length);
					}
				}
				else
				{
					Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_PARAM_OUT_OF_RANGE, &answer_length);
				}
				//
			}
			break;
		}

		default:
		{
			Prepare_Buf_ERROR(RX_Com_buf_pointer, TX_Com_buf_pointer, ERROR_UNKNOWN_COMMAND, &answer_length);
			break;
		}
		*/
	}
	/*
	if( (answer_length != 0) && ((answer_length + 2) <= MSG_MAX_LEN) )
	{
		p_mrte_buff->len = answer_length;
		while(request_mrte_send(mega_ans_type, p_mrte_buff) == pdFALSE);
	}
	else
	{
		if(p_mrte_buff != NULL)
		{
			free_mrte_send_buff(p_mrte_buff);
		}
	}
	*/
}

